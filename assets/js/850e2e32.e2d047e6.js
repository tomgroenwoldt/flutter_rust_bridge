"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[9187],{15680:(e,r,n)=>{n.d(r,{xA:()=>d,yg:()=>g});var t=n(96540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},c=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),g=a,h=c["".concat(s,".").concat(g)]||c[g]||p[g]||o;return n?t.createElement(h,i(i({ref:r},d),{},{components:n})):t.createElement(h,i({ref:r},d))}));function g(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},32123:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=n(58168),a=(n(96540),n(15680));const o={},i="Cross-origin in Web",l={unversionedId:"manual/miscellaneous/web-cross-origin",id:"manual/miscellaneous/web-cross-origin",title:"Cross-origin in Web",description:"Background",source:"@site/docs/manual/miscellaneous/02-web-cross-origin.md",sourceDirName:"manual/miscellaneous",slug:"/manual/miscellaneous/web-cross-origin",permalink:"/flutter_rust_bridge/manual/miscellaneous/web-cross-origin",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/miscellaneous/02-web-cross-origin.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Miscellaneous",permalink:"/flutter_rust_bridge/manual/miscellaneous"},next:{title:"Limitations of WASM",permalink:"/flutter_rust_bridge/manual/miscellaneous/wasm-limitations"}},s={},u=[{value:"Background",id:"background",level:2},{value:"When <code>flutter run</code>",id:"when-flutter-run",level:2},{value:"When <code>flutter drive</code>",id:"when-flutter-drive",level:2},{value:"Run without cross-origin headers",id:"run-without-cross-origin-headers",level:2},{value:"When deploy",id:"when-deploy",level:2}],d={toc:u};function p(e){let{components:r,...n}=e;return(0,a.yg)("wrapper",(0,t.A)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"cross-origin-in-web"},"Cross-origin in Web"),(0,a.yg)("h2",{id:"background"},"Background"),(0,a.yg)("p",null,"When using Rust (WASM) and Flutter on the web platform,\nthe web server needs to respond with the following headers to enable shared buffers:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Cross-Origin-Opener-Policy"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"same-origin")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Cross-Origin-Embedder-Policy"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"credentialless")," OR ",(0,a.yg)("inlineCode",{parentName:"li"},"require-corp")," (Safari seems to need ",(0,a.yg)("inlineCode",{parentName:"li"},"require-corp"),")")),(0,a.yg)("p",null,"Cross-origin isolated documents have less restrictions on advanced features, such as asynchronous WASM which utilize shared buffers.\nYou can read more about crossOriginIsolation ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/crossOriginIsolated"},"here"),"."),(0,a.yg)("h2",{id:"when-flutter-run"},"When ",(0,a.yg)("inlineCode",{parentName:"h2"},"flutter run")),(0,a.yg)("p",null,"Thanks to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/136297"},"this pull request"),", we can:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"flutter run --web-header=Cross-Origin-Opener-Policy=same-origin --web-header=Cross-Origin-Embedder-Policy=require-corp\n")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"When using Flutter < 3.17"),(0,a.yg)("p",null,"If you are still using Flutter before 3.17, the Flutter source code installed on your computer needs to be hacked as follows."),(0,a.yg)("p",null,"Suppose your ",(0,a.yg)("inlineCode",{parentName:"p"},"flutter")," is installed at ",(0,a.yg)("inlineCode",{parentName:"p"},"/whatever-path/bin/flutter")," (this can be found by e.g. ",(0,a.yg)("inlineCode",{parentName:"p"},"which flutter"),").\nFirstly, modify the file at ",(0,a.yg)("inlineCode",{parentName:"p"},"/whatever-path/packages/flutter_tools/lib/src/isolated/devfs_web.dart"),".\nFind out the line"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-dart"},"httpServer!.defaultResponseHeaders.remove('x-frame-options', 'SAMEORIGIN');\n")),(0,a.yg)("p",null,"And ",(0,a.yg)("em",{parentName:"p"},"add")," a few lines about headers near it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"     httpServer!.defaultResponseHeaders.remove('x-frame-options', 'SAMEORIGIN');\n \n+    print('Temporary hack Flutter framework to add headers');\n+    httpServer!.defaultResponseHeaders.add('cross-origin-opener-policy', 'same-origin');\n+    httpServer!.defaultResponseHeaders.add('cross-origin-embedder-policy', 'require-corp');\n+\n     final PackageConfig packageConfig = buildInfo.packageConfig;\n")),(0,a.yg)("p",null,"Secondly, you need to remove the following file to let Flutter understand the source has been changed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"rm /whatever-path/bin/cache/flutter_tools.stamp\n"))),(0,a.yg)("h2",{id:"when-flutter-drive"},"When ",(0,a.yg)("inlineCode",{parentName:"h2"},"flutter drive")),(0,a.yg)("p",null,"Thanks to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/136297"},"this pull request"),", we can do something similar:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"flutter drive --web-header=Cross-Origin-Opener-Policy=same-origin --web-header=Cross-Origin-Embedder-Policy=require-corp\n")),(0,a.yg)("h2",{id:"run-without-cross-origin-headers"},"Run without cross-origin headers"),(0,a.yg)("p",null,"While not recommended, it is possible to use flutter_rust_bridge Web (WASM) without using cross-origin isolation\nby following the steps below."),(0,a.yg)("p",null,"When will this be needed:\nFor example, when we are in rare cases where HTTPS hosting is not an option,\nmost browsers will ignore cross-origin headers for security reasons."),(0,a.yg)("p",null,"The main idea is to restrict ourselves to only use the main thread and never use other threads,\nwhich will stop the need for shared buffers, thus removing the need of cross-origin headers."),(0,a.yg)("p",null,"To achieve this, simply configure ",(0,a.yg)("inlineCode",{parentName:"p"},"default_dart_async: false")," (which makes every ",(0,a.yg)("inlineCode",{parentName:"p"},"pub fn")," automatically ",(0,a.yg)("inlineCode",{parentName:"p"},"#[frb(sync)] pub fn"),"), and then use ",(0,a.yg)("inlineCode",{parentName:"p"},"pub fn / pub async fn")," as usual."),(0,a.yg)("p",null,"Note that Rust's async system, such as ",(0,a.yg)("inlineCode",{parentName:"p"},"pub async fn")," and ",(0,a.yg)("a",{parentName:"p",href:"../../guides/cross-platform/async"},"async spawns"),", still works well here, because it runs on the main thread by default on the Web platform (though it is multi-threaded on native platforms)."),(0,a.yg)("h2",{id:"when-deploy"},"When deploy"),(0,a.yg)("p",null,"Please refer to the web server you are using to see how to add these HTTP headers."))}p.isMDXComponent=!0}}]);