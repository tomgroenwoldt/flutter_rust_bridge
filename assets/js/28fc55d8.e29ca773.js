"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[7654],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>c});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},o={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),g=s(t),c=a,m=g["".concat(u,".").concat(c)]||g[c]||o[c]||i;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var d={};for(var u in n)hasOwnProperty.call(n,u)&&(d[u]=n[u]);d.originalType=e,d.mdxType="string"==typeof e?e:a,l[1]=d;for(var s=2;s<i;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},44709:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const i={},l="Installing dependencies",d={unversionedId:"manual/integrate/existing/deps",id:"manual/integrate/existing/deps",title:"Installing dependencies",description:"Next, we need to install a few build-time and runtime dependencies.",source:"@site/docs/manual/integrate/06-existing/02-deps.md",sourceDirName:"manual/integrate/06-existing",slug:"/manual/integrate/existing/deps",permalink:"/flutter_rust_bridge/manual/integrate/existing/deps",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/06-existing/02-deps.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creating a new crate",permalink:"/flutter_rust_bridge/manual/integrate/existing/new-crate"},next:{title:"Integrating with Android",permalink:"/flutter_rust_bridge/manual/integrate/existing/android/"}},u={},s=[{value:"Build-time dependencies",id:"build-time-dependencies",level:2},{value:"Dart dependencies",id:"dart-dependencies",level:2},{value:"Rust dependencies",id:"rust-dependencies",level:2},{value:"System dependencies",id:"system-dependencies",level:2},{value:"Non-Debian Linux",id:"non-debian-linux",level:3}],p={toc:s};function o(e){let{components:n,...t}=e;return(0,a.yg)("wrapper",(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"installing-dependencies"},"Installing dependencies"),(0,a.yg)("p",null,"Next, we need to install a few build-time and runtime dependencies."),(0,a.yg)("h2",{id:"build-time-dependencies"},"Build-time dependencies"),(0,a.yg)("p",null,"These dependencies are required only in build-time:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://lib.rs/crates/flutter_rust_bridge_codegen"},(0,a.yg)("inlineCode",{parentName:"a"},"flutter_rust_bridge_codegen")),", the core codegen for Rust-Dart glue code"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://pub.dev/packages/ffigen"},(0,a.yg)("inlineCode",{parentName:"a"},"ffigen")),", to generate Dart code from C headers"),(0,a.yg)("li",{parentName:"ul"},"A working installation of LLVM, see ",(0,a.yg)("a",{parentName:"li",href:"https://pub.dev/packages/ffigen#installing-llvm"},"Installing LLVM"),", used by ",(0,a.yg)("inlineCode",{parentName:"li"},"ffigen")),(0,a.yg)("li",{parentName:"ul"},"(Optional) ",(0,a.yg)("a",{parentName:"li",href:"https://lib.rs/crates/cargo-xcode"},(0,a.yg)("inlineCode",{parentName:"a"},"cargo-xcode")),", if you want to generate Xcode projects for iOS and MacOS")),(0,a.yg)("p",null,"An easy way to install most of these dependencies is to run:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"dart project"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"cargo install flutter_rust_bridge_codegen\ndart pub add --dev ffigen && dart pub add ffi\n# if building for iOS or MacOS\ncargo install cargo-xcode\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"flutter project"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"cargo install flutter_rust_bridge_codegen\nflutter pub add --dev ffigen && flutter pub add ffi\n# if building for iOS or MacOS\ncargo install cargo-xcode\n")))),(0,a.yg)("p",null,"Alternatively, each of these dependencies may provide prebuilt binaries. Check with\nyour package manager and review them individually."),(0,a.yg)("h2",{id:"dart-dependencies"},"Dart dependencies"),(0,a.yg)("p",null,"On the Dart side, ",(0,a.yg)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," is the required runtime component of\n",(0,a.yg)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen"),". If you plan to use enum structs in Rust, the\nfollowing dependencies are also needed:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"build_runner")," (dev)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"freezed")," (dev)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"freezed_annotation"))),(0,a.yg)("p",null,"Their usage is explained in ",(0,a.yg)("a",{parentName:"p",href:"../template/generate/build-runner"},"Using ",(0,a.yg)("inlineCode",{parentName:"a"},"build_runner")),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"flutter pub add flutter_rust_bridge\n# if using Dart codegen\nflutter pub add -d build_runner\nflutter pub add -d freezed\nflutter pub add freezed_annotation\n")),(0,a.yg)("h2",{id:"rust-dependencies"},"Rust dependencies"),(0,a.yg)("p",null,"Similar to Dart, Rust requires the ",(0,a.yg)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," runtime component for support."),(0,a.yg)("p",null,"Add these lines to ",(0,a.yg)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},'+[dependencies]\n+flutter_rust_bridge = "1"\n')),(0,a.yg)("h2",{id:"system-dependencies"},"System dependencies"),(0,a.yg)("h3",{id:"non-debian-linux"},"Non-Debian Linux"),(0,a.yg)("p",null,"For non-debian based Linux distributions, there are a few prerequisites:"),(0,a.yg)("p",null,"Firstly, ensure that packages are up to date (or install by demand)."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"clang"),(0,a.yg)("li",{parentName:"ul"},"llvm-libs"),(0,a.yg)("li",{parentName:"ul"},"glibc")),(0,a.yg)("p",null,"Restarting system may be required."),(0,a.yg)("p",null,"Secondly, set the environment variable in your shell profile (",(0,a.yg)("inlineCode",{parentName:"p"},".bashrc"),", ",(0,a.yg)("inlineCode",{parentName:"p"},".zshrc"),", etc):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'export CPATH="$(clang -v 2>&1 | grep "Selected GCC installation" | rev | cut -d\' \' -f1 | rev)/include"\n')))}o.isMDXComponent=!0}}]);