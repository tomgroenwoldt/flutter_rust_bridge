"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[746],{15680:(e,r,n)=>{n.d(r,{xA:()=>l,yg:()=>p});var t=n(96540);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function u(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),i=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},l=function(e){var r=i(e.components);return t.createElement(s.Provider,{value:r},e.children)},y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=i(n),p=o,f=d["".concat(s,".").concat(p)]||d[p]||y[p]||a;return n?t.createElement(f,c(c({ref:r},l),{},{components:n})):t.createElement(f,c({ref:r},l))}));function p(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var u={};for(var s in r)hasOwnProperty.call(r,s)&&(u[s]=r[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,c[1]=u;for(var i=2;i<a;i++)c[i]=n[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},74137:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>y,frontMatter:()=>a,metadata:()=>u,toc:()=>i});var t=n(58168),o=(n(96540),n(15680));const a={},c="Synchronous Dart",u={unversionedId:"guides/concurrency/sync-dart",id:"guides/concurrency/sync-dart",title:"Synchronous Dart",description:"In order to generate synchronous functions in Dart,",source:"@site/docs/guides/concurrency/sync-dart.md",sourceDirName:"guides/concurrency",slug:"/guides/concurrency/sync-dart",permalink:"/flutter_rust_bridge/guides/concurrency/sync-dart",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/concurrency/sync-dart.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Asynchronous Rust",permalink:"/flutter_rust_bridge/guides/concurrency/async-rust"},next:{title:"Asynchronous Dart",permalink:"/flutter_rust_bridge/guides/concurrency/async-dart"}},s={},i=[{value:"Example",id:"example",level:2}],l={toc:i};function y(e){let{components:r,...n}=e;return(0,o.yg)("wrapper",(0,t.A)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"synchronous-dart"},"Synchronous Dart"),(0,o.yg)("p",null,"In order to generate synchronous functions in Dart,\nadd ",(0,o.yg)("inlineCode",{parentName:"p"},"#[frb(sync)]")," attributes to the Rust function.\nAs usual, this feature is compatible with other features,\ne.g. you can use arbitrary argument and return types."),(0,o.yg)("p",null,"It is useful when you want to make the generated Dart API be synchronous,\nespecially helpful when you cannot ",(0,o.yg)("inlineCode",{parentName:"p"},"await")," something,\nfor example inside Flutter's ",(0,o.yg)("inlineCode",{parentName:"p"},"build"),"."),(0,o.yg)("p",null,"If your function is quick and is called a ton of times,\nusing synchronous mode will reduce the calling overhead (though already small).\nIf, on the other hand, your function is slow,\nit is recommended to use the asynchronous mode,\nbecause synchronous mode will block the Dart UI."),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust"},"fn normal() {}\n\n#[frb(sync)]\nfn dart_counterpart_is_synchronous() {}\n")),(0,o.yg)("p",null,"Dart:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-dart"},"await normal(); // Need await\ndartCounterpartIsSynchronous(); // No need await\n")))}y.isMDXComponent=!0}}]);