"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[6852],{15680:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>m});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(a),m=r,y=c["".concat(o,".").concat(m)]||c[m]||p[m]||l;return a?n.createElement(y,i(i({ref:t},d),{},{components:a})):n.createElement(y,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},34634:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=a(58168),r=(a(96540),a(15680));const l={},i="Structs",s={unversionedId:"guides/types/translatable/detailed/struct",id:"guides/types/translatable/detailed/struct",title:"Structs",description:"Normal Rust structs are supported. You can even use recursive fields, such as pub struct TreeNode { pub value Vec, pub parent: Box }.",source:"@site/docs/guides/types/translatable/detailed/struct.md",sourceDirName:"guides/types/translatable/detailed",slug:"/guides/types/translatable/detailed/struct",permalink:"/flutter_rust_bridge/guides/types/translatable/detailed/struct",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/translatable/detailed/struct.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Vec, array, slice",permalink:"/flutter_rust_bridge/guides/types/translatable/detailed/vec"},next:{title:"Enums",permalink:"/flutter_rust_bridge/guides/types/translatable/detailed/enum"}},o={},u=[{value:"Tuple structs",id:"tuple-structs",level:2},{value:"Non-final fields",id:"non-final-fields",level:2},{value:"Dart metadata annotations",id:"dart-metadata-annotations",level:2},{value:"<code>freezed</code> Dart classes",id:"freezed-dart-classes",level:2},{value:"JSON serialization support (<code>json_serializable</code>)",id:"json-serialization-support-json_serializable",level:2},{value:"Unignore the type",id:"unignore-the-type",level:2},{value:"Rename fields",id:"rename-fields",level:2},{value:"Example",id:"example",level:2},{value:"Example 1: Recursive fields",id:"example-1-recursive-fields",level:3},{value:"Example 2: Metadata",id:"example-2-metadata",level:3}],d={toc:u};function p(e){let{components:t,...a}=e;return(0,r.yg)("wrapper",(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"structs"},"Structs"),(0,r.yg)("p",null,"Normal Rust structs are supported. You can even use recursive fields, such as ",(0,r.yg)("inlineCode",{parentName:"p"},"pub struct TreeNode { pub value: String, pub children: Vec<MyTreeNode>, pub parent: Box<MyTreeNode> }"),"."),(0,r.yg)("p",null,"For versions older than v1.66.0 (no need for latest version), if a struct field has type being a struct or an enum, please add a ",(0,r.yg)("inlineCode",{parentName:"p"},"Box")," on it, or it will lead to compile-time error. For example, ",(0,r.yg)("inlineCode",{parentName:"p"},"struct A {b: B}")," should be ",(0,r.yg)("inlineCode",{parentName:"p"},"struct A {b: Box<B>}")," instead."),(0,r.yg)("h2",{id:"tuple-structs"},"Tuple structs"),(0,r.yg)("p",null,"Tuple structs ",(0,r.yg)("inlineCode",{parentName:"p"},"struct Foo(A, B)")," are translated as ",(0,r.yg)("inlineCode",{parentName:"p"},"class Foo { A field0; B field1; }"),", since Dart does not have anonymous fields."),(0,r.yg)("h2",{id:"non-final-fields"},"Non-final fields"),(0,r.yg)("p",null,"By adding ",(0,r.yg)("inlineCode",{parentName:"p"},"#[frb(non_final)]")," to a field of struct, the corresponding field in Dart will be non-final. By default, we make all generated fields final because of Rust's philosophy - immutable by default."),(0,r.yg)("p",null,"Unless a field has been annotated with ",(0,r.yg)("inlineCode",{parentName:"p"},"#[frb(non_final)]"),", generated classes will also be const-constructible."),(0,r.yg)("h2",{id:"dart-metadata-annotations"},"Dart metadata annotations"),(0,r.yg)("p",null,"You can add dart metadata annotations using ",(0,r.yg)("inlineCode",{parentName:"p"},"dart_metadata")," parameter in ",(0,r.yg)("inlineCode",{parentName:"p"},"frb")," macro."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For annotations that are prelude by dart (e.g. ",(0,r.yg)("inlineCode",{parentName:"li"},"@deprecated"),"), just put annotation as a Rust literal."),(0,r.yg)("li",{parentName:"ul"},"If importing is needed, then add importing part behind the annotation string. Currently two forms of importing supported:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"import 'somepackage'")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"import 'somepackage' as somename"),", where ",(0,r.yg)("inlineCode",{parentName:"li"},"somename")," will be the prefix of the annotation"))),(0,r.yg)("li",{parentName:"ul"},"Multiple annotations are separated by comma ",(0,r.yg)("inlineCode",{parentName:"li"},","),".")),(0,r.yg)("p",null,"See below for an example."),(0,r.yg)("h2",{id:"freezed-dart-classes"},(0,r.yg)("inlineCode",{parentName:"h2"},"freezed")," Dart classes"),(0,r.yg)("p",null,"If you want the generated Dart class to be ",(0,r.yg)("a",{parentName:"p",href:"https://pub.dev/packages/freezed"},(0,r.yg)("inlineCode",{parentName:"a"},"freezed"))," (which is like data-classes in other languages like Kotlin), simply put ",(0,r.yg)("inlineCode",{parentName:"p"},'#[frb(dart_metadata=("freezed"))]')," and it will generate everything needed for you."),(0,r.yg)("h2",{id:"json-serialization-support-json_serializable"},"JSON serialization support (",(0,r.yg)("inlineCode",{parentName:"h2"},"json_serializable"),")"),(0,r.yg)("p",null,"In order to make the generated Dart class automatically support JSON serialization,\nmark the struct/enum with ",(0,r.yg)("inlineCode",{parentName:"p"},"#[frb(json_serializable)]"),"."),(0,r.yg)("p",null,"Then, the class will have ",(0,r.yg)("inlineCode",{parentName:"p"},"fromJson")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"toJson")," methods, thus the type can be used in, for example, ",(0,r.yg)("inlineCode",{parentName:"p"},"jsonDecode")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"jsonEncode"),"."),(0,r.yg)("h2",{id:"unignore-the-type"},"Unignore the type"),(0,r.yg)("p",null,"By default, when a struct/enum is never used by any function that flutter_rust_bridge recognizes,\nit will be ignored. This is because such struct/enum is usually unused when communicating between Dart and Rust.\nHowever, if you want the struct/enum to be generated regardless of such scenario, put ",(0,r.yg)("inlineCode",{parentName:"p"},"#[frb(unignore)]")," on it."),(0,r.yg)("h2",{id:"rename-fields"},"Rename fields"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},'#[frb(name = "...")]')," can be utilized to change the Dart name of a struct field.\nFor example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[frb]\npub struct MyStruct {\n  #[frb(name = "dartFieldName")]\n  pub rust_field_name: Vec<u8>,\n}\n')),(0,r.yg)("p",null,"It will give a Dart class with field ",(0,r.yg)("inlineCode",{parentName:"p"},"dartFieldName"),"."),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("h3",{id:"example-1-recursive-fields"},"Example 1: Recursive fields"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct MyTreeNode {\n    pub value: Vec<u8>,\n    pub children: Vec<MyTreeNode>,\n}\n")),(0,r.yg)("p",null,"Becomes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-Dart"},"class MyTreeNode {\n  final Uint8List value;\n  final List<MyTreeNode> children;\n  MyTreeNode({required this.value, required this.children});\n}\n")),(0,r.yg)("p",null,"Remark: If you are curious about ",(0,r.yg)("inlineCode",{parentName:"p"},"Future"),", have a look at ",(0,r.yg)("a",{parentName:"p",href:"../../../concurrency/async-dart"},"this"),"."),(0,r.yg)("h3",{id:"example-2-metadata"},"Example 2: Metadata"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[frb(dart_metadata=("freezed", "immutable" import "package:meta/meta.dart" as meta))]\npub struct UserId {\n    pub value: u32,\n}\n')),(0,r.yg)("p",null,"Becomes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-dart"},"import 'package:meta/meta.dart' as meta;\n\n@freezed\n@meta.immutable\nclass UserId with _$UserId {\n  const factory UserId({\n    required int value,\n  }) = _UserId;\n}\n")))}p.isMDXComponent=!0}}]);