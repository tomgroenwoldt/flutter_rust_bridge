"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[7230],{15680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>y});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=l(r),y=n,f=c["".concat(s,".").concat(y)]||c[y]||d[y]||o;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:n,i[1]=u;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},65765:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var a=r(58168),n=(r(96540),r(15680));const o={},i="Override opaqueness",u={unversionedId:"guides/types/arbitrary/rust-auto-opaque/override-defaults",id:"guides/types/arbitrary/rust-auto-opaque/override-defaults",title:"Override opaqueness",description:"By default, flutterrustbridge tries to infer whether a type is opaque or not automatically.",source:"@site/docs/guides/types/arbitrary/rust-auto-opaque/override-defaults.md",sourceDirName:"guides/types/arbitrary/rust-auto-opaque",slug:"/guides/types/arbitrary/rust-auto-opaque/override-defaults",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/override-defaults",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/arbitrary/rust-auto-opaque/override-defaults.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using underlying data",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/using-data"},next:{title:"Properties (Accessors)",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/properties"}},s={},l=[{value:"Example",id:"example",level:2}],p={toc:l};function d(e){let{components:t,...r}=e;return(0,n.yg)("wrapper",(0,a.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"override-opaqueness"},"Override opaqueness"),(0,n.yg)("p",null,"By default, flutter_rust_bridge tries to infer whether a type is opaque or not automatically.\nTo override the default behavior, please use ",(0,n.yg)("inlineCode",{parentName:"p"},"#[frb(opaque)]")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"#[frb(non_opaque)]"),"."),(0,n.yg)("p",null,"Sometimes, the opaqueness cannot be overrided. For example, when struct ",(0,n.yg)("inlineCode",{parentName:"p"},"A")," is used in a function as ",(0,n.yg)("inlineCode",{parentName:"p"},"&mut A"),".\n(This is because non-opaque types are copied field-by-field, thus it is meaningless to have a mutable reference.)"),(0,n.yg)("h2",{id:"example"},"Example"),(0,n.yg)("p",null,"If a type is indeed encodable, it will by default be translated to the corresponding Dart types.\nHowever, if you want to force it to be opaque, you can use the ",(0,n.yg)("inlineCode",{parentName:"p"},"#[frb(opaque)]")," attribute."),(0,n.yg)("p",null,"This is useful, for example, when the data is heavy and is mainly used in Rust,\nand you do not want to transfer it between Dart and Rust over and over again."),(0,n.yg)("p",null,"For example:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-rust"},"struct A {\n    name: String,\n}\n\n#[frb(opaque)]\nstruct B {\n    name: String,\n}\n")),(0,n.yg)("p",null,"Will generate different Dart code:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-dart"},"// A pretty standard Dart class with fields inside it\nclass A { String name; ... }\n\n// A Dart class without data fields, you should pass it to Rust to manipulate it\nclass B extends RustAutoOpaque { ... }\n")))}d.isMDXComponent=!0}}]);