"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8434],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),d=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=d(t),m=a,g=c["".concat(u,".").concat(m)]||c[m]||p[m]||i;return t?r.createElement(g,l(l({ref:n},s),{},{components:t})):r.createElement(g,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},25047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=t(58168),a=(t(96540),t(15680));const i={},l="Using build_runner",o={unversionedId:"manual/integrate/template/generate/build-runner",id:"manual/integrate/template/generate/build-runner",title:"Using build_runner",description:"Inspect your lib/bridge_generated.dart and you will see that the definition of Platform has changed:",source:"@site/docs/manual/integrate/05-template/03-generate/03-build-runner.md",sourceDirName:"manual/integrate/05-template/03-generate",slug:"/manual/integrate/template/generate/build-runner",permalink:"/flutter_rust_bridge/manual/integrate/template/generate/build-runner",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/05-template/03-generate/03-build-runner.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adding new code",permalink:"/flutter_rust_bridge/manual/integrate/template/generate/adding-code"},next:{title:"Wrapping up",permalink:"/flutter_rust_bridge/manual/integrate/template/generate/finish"}},u={},d=[],s={toc:d};function p(e){let{components:n,...t}=e;return(0,a.yg)("wrapper",(0,r.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"using-build_runner"},"Using ",(0,a.yg)("inlineCode",{parentName:"h1"},"build_runner")),(0,a.yg)("p",null,"Inspect your ",(0,a.yg)("inlineCode",{parentName:"p"},"lib/bridge_generated.dart")," and you will see that the definition of ",(0,a.yg)("inlineCode",{parentName:"p"},"Platform")," has changed:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-dart"},"@freezed\nsealed class Platform with _$Platform {\n    const factory Platform.unknown() = Platform_Unknown;\n    const factory Platform.android() = Platform_Android;\n    const factory Platforn.ios() = Platform_Ios;\n    const factory Platform.windows() = Platform_Windows;\n    const factory Platform.unix() = Platform_Unix;\n    const factory Platform.macOs(\n        String field0,\n    ) = Platform_MacOs;\n    const factory Platform.wasm() = Platform_Wasm;\n}\n")),(0,a.yg)("p",null,"It is no longer a plain enum, but a full-blown enum class with variants! As it is right now, this code\ncannot compile yet since it is missing some components, namely the ",(0,a.yg)("a",{parentName:"p",href:"https://pub.dev/packages/freezed"},(0,a.yg)("inlineCode",{parentName:"a"},"freezed"))," library. ",(0,a.yg)("a",{parentName:"p",href:"https://pub.dev/packages/freezed"},(0,a.yg)("inlineCode",{parentName:"a"},"freezed"))," is a\ncodegen library similar to those we've encountered thus far, but generates more Dart code instead.\nAll such libraries perform their code generation upon invoking ",(0,a.yg)("inlineCode",{parentName:"p"},"build_runner"),", i.e. when ",(0,a.yg)("inlineCode",{parentName:"p"},"flutter pub run build_runner build")," is executed."),(0,a.yg)("p",null,"Regardless, to make this code compile again, we need to make a few changes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Run the following commands to add the latest version of ",(0,a.yg)("a",{parentName:"li",href:"https://pub.dev/packages/freezed"},(0,a.yg)("inlineCode",{parentName:"a"},"freezed")),":")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"flutter pub add -d build_runner\nflutter pub add -d freezed\nflutter pub add freezed_annotation\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Update ",(0,a.yg)("inlineCode",{parentName:"li"},"justfile")," to run ",(0,a.yg)("inlineCode",{parentName:"li"},"build_runner")," after Rust codegen:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"}," gen:\n     ..\n     # Uncomment this line to invoke build_runner as well\n-    # flutter pub run build_runner build\n+    flutter pub run build_runner build\n")),(0,a.yg)("p",null,"Now calling ",(0,a.yg)("inlineCode",{parentName:"p"},"just")," will generate both the Rust bindings ",(0,a.yg)("em",{parentName:"p"},"and")," the Dart library code."))}p.isMDXComponent=!0}}]);