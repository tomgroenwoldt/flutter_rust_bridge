"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[2330],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||i;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},73095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(58168),a=(n(96540),n(15680));const i={},o="Miscellaneous features",l={unversionedId:"manual/miscellaneous/archived/misc-feature",id:"manual/miscellaneous/archived/misc-feature",title:"Miscellaneous features",description:"Separate generated definitions from implementations",source:"@site/docs/manual/miscellaneous/92-archived/06-misc-feature.md",sourceDirName:"manual/miscellaneous/92-archived",slug:"/manual/miscellaneous/archived/misc-feature",permalink:"/flutter_rust_bridge/manual/miscellaneous/archived/misc-feature",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/miscellaneous/92-archived/06-misc-feature.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Misc operations in contributing",permalink:"/flutter_rust_bridge/manual/miscellaneous/archived/misc-contributing"},next:{title:"WASM",permalink:"/flutter_rust_bridge/manual/miscellaneous/archived/wasm"}},s={},u=[{value:"Separate generated definitions from implementations",id:"separate-generated-definitions-from-implementations",level:2},{value:"Logging for developers",id:"logging-for-developers",level:2}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"miscellaneous-features"},"Miscellaneous features"),(0,a.yg)("h2",{id:"separate-generated-definitions-from-implementations"},"Separate generated definitions from implementations"),(0,a.yg)("p",null,"The generated ",(0,a.yg)("inlineCode",{parentName:"p"},"bridge_generated.dart")," by default contains definitions of the APIs as well as the implementations. With the flag ",(0,a.yg)("inlineCode",{parentName:"p"},"--dart-decl-output"),", the two can be separated, and the definitions will not contain anything like ",(0,a.yg)("inlineCode",{parentName:"p"},"dart:ffi"),"."),(0,a.yg)("p",null,"A command example as follow:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"flutter_rust_bridge_codegen .. --dart-decl-output <DECL>\n")),(0,a.yg)("p",null,"where ",(0,a.yg)("inlineCode",{parentName:"p"},"DECL")," is the path to the common class/function declarations file.\nFor example, if you emit your Dart bridge to ",(0,a.yg)("inlineCode",{parentName:"p"},"lib/bridge_generated.dart"),",\nyou can put the declarations file at ",(0,a.yg)("inlineCode",{parentName:"p"},"lib/bridge_definitions.dart")),(0,a.yg)("p",null,"By default this will create new file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 bridge_definitions.dart\n")),(0,a.yg)("p",null,"More information: ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/298"},"#298"),"."),(0,a.yg)("h2",{id:"logging-for-developers"},"Logging for developers"),(0,a.yg)("p",null,"For developers who want to contribute to this project, here is the feature logging that needs to mention."),(0,a.yg)("p",null,"When the code in ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_codegen")," is modified, usually developers want to build and run it locally for testing. Now with the ",(0,a.yg)("inlineCode",{parentName:"p"},"init_logger")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"logs.rs")," from ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_codegen"),", it is easy to do so.  Take ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_example/pure_dart")," as an example, in ",(0,a.yg)("inlineCode",{parentName:"p"},"./rust/build.rs"),", with:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use lib_flutter_rust_bridge_codegen::init_logger;\nfn main() {\n    init_logger("./logs/").unwrap();\n...\n}\n')),(0,a.yg)("p",null,"Then, all information from standard panic, ",(0,a.yg)("inlineCode",{parentName:"p"},"log::info!()"),",",(0,a.yg)("inlineCode",{parentName:"p"}," log::debug()!"),"...  of ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_codegen")," would be recorded to  ",(0,a.yg)("inlineCode",{parentName:"p"},"./logs/")," with a file name of date, like ",(0,a.yg)("inlineCode",{parentName:"p"},"2023-02-01.log")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_example/pure_dart/rust")," as long as the example is built through ",(0,a.yg)("inlineCode",{parentName:"p"},"build.rs"),". Note, the data from the same day would be appended to the same file."),(0,a.yg)("p",null,"Moreover, if rust-analyzer is used, then whenever ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_codegen")," is modified, all examples with ",(0,a.yg)("inlineCode",{parentName:"p"},"build.rs")," would be automatically triggered to rebuild. Then the log would be updated automatically to disk, which makes the whole developing routine easier."))}p.isMDXComponent=!0}}]);