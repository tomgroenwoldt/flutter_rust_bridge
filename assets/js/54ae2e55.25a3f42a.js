"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[663],{15680:(e,n,r)=>{r.d(n,{xA:()=>u,yg:()=>g});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=t.createContext({}),s=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(r),g=a,m=c["".concat(d,".").concat(g)]||c[g]||p[g]||i;return r?t.createElement(m,o(o({ref:n},u),{},{components:r})):t.createElement(m,o({ref:n},u))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},60298:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=r(58168),a=(r(96540),r(15680));const i={},o="Android",l={unversionedId:"manual/integrate/library/platform-setup/android",id:"manual/integrate/library/platform-setup/android",title:"Android",description:"There are a few different ways to integrate with our Android binaries when building for Android. None are particularly outstanding:",source:"@site/docs/manual/integrate/07-library/03-platform-setup/03-android.md",sourceDirName:"manual/integrate/07-library/03-platform-setup",slug:"/manual/integrate/library/platform-setup/android",permalink:"/flutter_rust_bridge/manual/integrate/library/platform-setup/android",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/07-library/03-platform-setup/03-android.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"iOS & macOS",permalink:"/flutter_rust_bridge/manual/integrate/library/platform-setup/ios-and-macos"},next:{title:"Continuous Integration & Deployment (CI/CD)",permalink:"/flutter_rust_bridge/manual/integrate/library/ci"}},d={},s=[{value:"CMake (<code>/packages/flutter_library_name/android/CMakeLists.txt</code>)",id:"cmake-packagesflutter_library_nameandroidcmakeliststxt",level:2},{value:"<code>build.gradle</code> Changes",id:"buildgradle-changes",level:2},{value:"<code>.gitignore</code>",id:"gitignore",level:2},{value:"Build Script (<code>/scripts/build-android.sh</code>)",id:"build-script-scriptsbuild-androidsh",level:2}],u={toc:s};function p(e){let{components:n,...r}=e;return(0,a.yg)("wrapper",(0,t.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"android"},"Android"),(0,a.yg)("p",null,"There are a few different ways to integrate with our Android binaries when building for Android. None are particularly outstanding:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},'An "Ivy Repository"',(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Works great, but impossible to test changes on an emulator locally or in CI :("))),(0,a.yg)("li",{parentName:"ul"},"Raw Groovy & Gradle",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Works in theory, but tedious to have to write all needed logic in Groovy/Gradle"))),(0,a.yg)("li",{parentName:"ul"},"Starting an OS Shell",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Similar to iOS & macOS, see that section for more details on this"),(0,a.yg)("li",{parentName:"ul"},"Wouldn't work on Windows development machines unfortunately; the started shell would not be ",(0,a.yg)("inlineCode",{parentName:"li"},"bash")))),(0,a.yg)("li",{parentName:"ul"},"CMake",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"We call to CMake from Gradle to take care of fetching and processing our Android binaries"),(0,a.yg)("li",{parentName:"ul"},"A somewhat odd approach, but works cross-platform and has code re-use from Windows/Linux!")))),(0,a.yg)("p",null,"Due to the above reasoning, we cover how to use CMake on this page. But do note, there are other possibilities out there."),(0,a.yg)("h2",{id:"cmake-packagesflutter_library_nameandroidcmakeliststxt"},"CMake (",(0,a.yg)("inlineCode",{parentName:"h2"},"/packages/flutter_library_name/android/CMakeLists.txt"),")"),(0,a.yg)("p",null,"Unlike windows and linux CMakeLists.txt, the android equivalent does\n",(0,a.yg)("em",{parentName:"p"},"not actually build anything"),", which may come as a surprise.\nInstead, its sole purpose is to download & extract our Android binaries\nin a cross-platform friendly way. Here is our android ",(0,a.yg)("inlineCode",{parentName:"p"},"CMakeLists.txt"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cmake"},'set(LibraryVersion "library_name-v0.0.0") # generated; do not edit\nset(PROJECT_NAME "project_name")\n\n# Unlike the Windows & Linux CMakeLists.txt, this Android equivalent is just here\n# to download the Android binaries into src/main/jniLibs/ and does not build anything.\n# The binary download/extraction is difficult to do concisely in Groovy/Gradle,\n# at least across host platforms, so we are just reusing our Linux/Windows logic.\n\n# The Flutter tooling requires that developers have CMake 3.10 or later\n# installed. You should not increase this version, as doing so will cause\n# the plugin to fail to compile for some customers of the plugin.\ncmake_minimum_required(VERSION 3.10)\n\nproject(PROJECT_NAME)\n\n# Download the binaries if they are not already present.\nset(LibRoot "${CMAKE_CURRENT_SOURCE_DIR}/src/main/jniLibs")\nset(ArchivePath "${CMAKE_CURRENT_SOURCE_DIR}/${LibraryVersion}.tar.gz")\nif(NOT EXISTS ${ArchivePath})\n  file(DOWNLOAD\n    "https://github.com/YourGitHubAccount/repo_name/releases/download/${LibraryVersion}/android.tar.gz"\n    ${ArchivePath}\n    TLS_VERIFY ON\n  )\nendif()\n\n# Extract the binaries, overriding any already present.\nfile(REMOVE_RECURSE ${LibRoot})\nfile(MAKE_DIRECTORY ${LibRoot})\nexecute_process(\n  COMMAND ${CMAKE_COMMAND} -E tar xzf ${ArchivePath}\n  WORKING_DIRECTORY ${LibRoot}\n)\n')),(0,a.yg)("p",null,"Replace all instances of ",(0,a.yg)("inlineCode",{parentName:"p"},"library_name")," above with your library name.\nAlso, replace other variables (i.e. ",(0,a.yg)("inlineCode",{parentName:"p"},"YourGitHubAccount")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"repo_name"),") as needed."),(0,a.yg)("h2",{id:"buildgradle-changes"},(0,a.yg)("inlineCode",{parentName:"h2"},"build.gradle")," Changes"),(0,a.yg)("p",null,"Replace the ",(0,a.yg)("inlineCode",{parentName:"p"},"android {...}")," section at the bottom of ",(0,a.yg)("inlineCode",{parentName:"p"},"build.gradle")," with the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-gradle"},'android {\n    compileSdkVersion 31\n\n    defaultConfig {\n        minSdkVersion 16\n    }\n\n    // Trigger the binary download/update over in CMakeLists.txt\n    externalNativeBuild {\n        cmake {\n            path "CMakeLists.txt"\n        }\n    }\n}\n')),(0,a.yg)("h2",{id:"gitignore"},(0,a.yg)("inlineCode",{parentName:"h2"},".gitignore")),(0,a.yg)("p",null,"Add the following to ",(0,a.yg)("inlineCode",{parentName:"p"},"android/.gitignore")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-gitignore"},"# Ignore Rust binaries\nsrc/main/jniLibs/\n*.tar.gz\n")),(0,a.yg)("h2",{id:"build-script-scriptsbuild-androidsh"},"Build Script (",(0,a.yg)("inlineCode",{parentName:"h2"},"/scripts/build-android.sh"),")"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\n# Setup\nBUILD_DIR=platform-build\nmkdir $BUILD_DIR\ncd $BUILD_DIR\n\n# Create the jniLibs build directory\nJNI_DIR=jniLibs\nmkdir -p $JNI_DIR\n\n# Set up cargo-ndk\ncargo install cargo-ndk\nrustup target add \\\n        aarch64-linux-android \\\n        armv7-linux-androideabi \\\n        x86_64-linux-android \\\n        i686-linux-android\n\n# Build the android libraries in the jniLibs directory\ncargo ndk -o $JNI_DIR \\\n        --manifest-path ../Cargo.toml \\\n        -t armeabi-v7a \\\n        -t arm64-v8a \\\n        -t x86 \\\n        -t x86_64 \\\n        build --release \n\n# Archive the dynamic libs\ncd $JNI_DIR\ntar -czvf ../android.tar.gz *\ncd -\n\n# Cleanup\nrm -rf $JNI_DIR\n")))}p.isMDXComponent=!0}}]);